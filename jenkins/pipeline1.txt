#!groovy
def testJobsToRun
def projectVersion

def parallelTestJobStagesMap = "${params.testJobNames}".split(",").collectEntries {
    ["${it}" : testJobStage(it)]
}


def testJobStage(job) {
    return {
        try {
            stage("Execute: ${job}") {
                jobResult = build job: "./${job}", propagate: false
                if (!jobResult.getResult().equals('SUCCESS')) {
                    error 'FAIL' // this fails the stage
                }
            }
        } catch (e) {
            currentBuild.result = 'UNSTABLE'
            result = "FAIL" // make sure other exceptions are recorded as failure too
        }
    }
}


pipeline {

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timestamps()
        timeout(time: 15, unit: 'HOURS')
    }
    agent {
        node {
            label "${params.nodeLabel}"
        }
    }
    environment {
        NODE_LABEL = "${params.nodeLabel}"
        _JAVA_OPTIONS = "-Djava.io.tmp=$WORKSPACE/.tmp"
        JDK_VERSION = "${params.jdkVersion}"
        MAVEN_VERSION = "${params.mavenVersion}"
    }
    tools {
        maven "${params.mavenVersion}"
        jdk "${params.jdkVersion}"
    }

    stages {
        stage("clean & checkout") {
            steps {
                step([$class: 'WsCleanup'])
                git url: "ssh://git@nr-bitbucket.rambus.com:7999/${params.projectCode}/${params.repoName}.git", branch: "${params.branchName}", credentialsId: 'ada0dfb7-9075-4c9d-9977-5e85fc3ded90'
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    projectVersion = pom.version
                }
            }
        }
        stage('Unit Test and Build Artifacts') {
            when {
                expression {
                    params.skipMavenBuild == null || params.skipMavenBuild == 'false'
                }
            }
            steps {
                withMaven(maven: "${params.mavenVersion}", mavenLocalRepo: "$WORKSPACE/.repository", mavenOpts: '-Xmx15G -Xms4G -XX:PermSize=2G', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {
                    sh "mvn -Dexecutor.number=$EXECUTOR_NUMBER -Pci-full,docker clean package deploy"
                }
            }
        }

        stage('Clean WorkSpace') {
            steps {
                step([$class: 'WsCleanup'])
            }
        }

        stage('Build Test Artifacts(DB and System-Test)') {
            steps {
                script {
                    echo "Triggering  BuildTestArtifacts with ${projectName} version ${projectVersion}"
                    build job: "./2.${projectCode}BuildTestArtifacts", propagate: true, parameters: [
                            [$class: 'StringParameterValue', name: 'PROJECT_VERSION', value: projectVersion]
                    ]
                }
            }
        }

        stage('parallel Run Integration Tests') {
            when {
                expression {
                    params.isparallel == 'true'
                }
            }
            steps {
                script {
                    parallel parallelTestJobStagesMap
                }
            }
        }

        stage('Sequential Run Integration Tests') {
            when {
                expression {
                    params.isparallel == 'false'
                }
            }
            steps {
                script {
                    echo "testJobNames: ${params.testJobNames}"
                    testJobsToRun = "${params.testJobNames}".split(",")

                    for(int i=0; i < testJobsToRun.size(); i++) {
                        try {
                            stage(testJobsToRun[i]) {
                                jobResult = build job: "./${testJobsToRun[i]}", propagate: false
                                if (currentBuild.result == null) {
                                    currentBuild.result = jobResult.getResult()
                                } else if (Result.fromString(jobResult.getResult()).isWorseThan(Result.fromString(currentBuild.result))) {
                                    currentBuild.result = jobResult.getResult()
                                }
                            }
                        } catch (e) {
                            currentBuild.result = 'UNSTABLE'
                            result = "FAIL" // make sure other exceptions are recorded as failure too
                        }
                    }

                }
            }
        }

    }


    post {
        always {
            cleanWs()
        }
    }

}

